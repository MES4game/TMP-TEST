import path from "path";
import { readFileSync } from "fs";
import eslint from "@eslint/js";
import { defineConfig } from "eslint/config";
import stylisticPlugin from "@stylistic/eslint-plugin";
import tsPlugin from "@typescript-eslint/eslint-plugin";
import tsParser from "@typescript-eslint/parser";
import tseslint from "typescript-eslint";
import reactPlugin from "eslint-plugin-react";

// Set it to false if too slow or no type support for JS/JSX files and uncomment the TSX config
const IS_JS_TYPED = Boolean(
    JSON.parse(
        readFileSync(path.resolve(path.join(import.meta.dirname, "tsconfig.json")), "utf-8"),
    ).compilerOptions?.checkJs,
);

if (IS_JS_TYPED) console.log("Linting JS files with type inference");

const NAMING_CONVENTION_RECORD = {
    // To show when the config do not cover something
    "no-match": {
        selector          : ["default"],
        format            : ["UPPER_CASE"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "require",
    },

    // Basic naming conventions
    "basic-global": {
        selector          : ["variable"],
        modifiers         : ["global"],
        format            : ["UPPER_CASE"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "forbid",
    },
    "basic-variable": {
        selector          : ["variable", "parameter", "property", "parameterProperty", "accessor"],
        format            : ["snake_case"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "forbid",
    },
    "basic-function": {
        selector          : ["function", "method"],
        format            : ["camelCase"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "forbid",
    },
    "basic-type": {
        selector          : ["typeLike"],
        format            : ["PascalCase"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "forbid",
    },
    "basic-import": {
        selector          : ["import"],
        format            : ["UPPER_CASE", "camelCase", "PascalCase"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "forbid",
    },

    // Require a leading underscore for private, protected and (consistent) unused
    "underscore-global-unused": {
        selector          : ["variable"],
        modifiers         : ["unused", "global"],
        format            : ["UPPER_CASE"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "forbid",
    },
    "underscore-unused": {
        selector          : ["variable", "parameter"],
        modifiers         : ["unused"],
        format            : ["snake_case"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
    "underscore-private-property": {
        selector          : ["property", "parameterProperty", "accessor"],
        modifiers         : ["private"],
        format            : ["snake_case"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
    "underscore-protected-property": {
        selector          : ["property", "parameterProperty", "accessor"],
        modifiers         : ["protected"],
        format            : ["snake_case"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
    "underscore-private-method": {
        selector          : ["method"],
        modifiers         : ["private"],
        format            : ["camelCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
    "underscore-protected-method": {
        selector          : ["method"],
        modifiers         : ["protected"],
        format            : ["camelCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },

    // allow camelCase for literal objects because of external imported property, like className in JSX, webpackHot for hot reloading, ...
    "external-object-literal-property": {
        selector          : ["objectLiteralProperty"],
        format            : ["snake_case", "camelCase"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "forbid",
    },
    "external-underscore-private-object-literal-property": {
        selector          : ["objectLiteralProperty"],
        modifiers         : ["private"],
        format            : ["snake_case", "camelCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
    "external-underscore-protected-object-literal-property": {
        selector          : ["objectLiteralProperty"],
        modifiers         : ["protected"],
        format            : ["snake_case", "camelCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
};

const NAMING_CONVENTION_TYPED_RECORD = {
    // Extend some configs to enable camelCase for those typed as functions
    "basic-variable-typed-function": {
        selector          : ["variable", "parameter", "property", "parameterProperty", "accessor"],
        types             : ["function"],
        format            : ["camelCase"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "forbid",
    },
    "underscore-global-unused-typed-function": {
        selector          : ["variable"],
        types             : ["function"],
        modifiers         : ["unused", "global"],
        format            : ["camelCase"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "forbid",
    },
    "underscore-unused-typed-function": {
        selector          : ["variable", "parameter"],
        types             : ["function"],
        modifiers         : ["unused"],
        format            : ["camelCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
    "underscore-private-property-typed-function": {
        selector          : ["property", "parameterProperty", "accessor"],
        types             : ["function"],
        modifiers         : ["private"],
        format            : ["camelCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
    "underscore-protected-property-typed-function": {
        selector          : ["property", "parameterProperty", "accessor"],
        types             : ["function"],
        modifiers         : ["protected"],
        format            : ["camelCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
    "external-object-literal-property-typed-function": {
        selector          : ["objectLiteralProperty"],
        types             : ["function"],
        format            : ["camelCase"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "forbid",
    },
    "external-underscore-private-object-literal-property-typed-function": {
        selector          : ["objectLiteralProperty"],
        types             : ["function"],
        modifiers         : ["private"],
        format            : ["camelCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
    "external-underscore-protected-object-literal-property-typed-function": {
        selector          : ["objectLiteralProperty"],
        types             : ["function"],
        modifiers         : ["protected"],
        format            : ["camelCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
};

const NAMING_CONVENTION_REACT_RECORD = {
    // Extend some configs to enable PascalCase for React components
    "basic-variable-jsx": {
        selector: ["variable", "parameter", "property", "parameterProperty", "accessor"],
        filter  : {
            regex: "(App|Page|Comp|Component|Context|Provider)$",
            match: true,
        },
        format            : ["PascalCase"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "forbid",
    },
    "underscore-global-unused-jsx": {
        selector: ["variable"],
        filter  : {
            regex: "(App|Page|Comp|Component|Context|Provider)$",
            match: true,
        },
        modifiers         : ["unused", "global"],
        format            : ["PascalCase"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "forbid",
    },
    "underscore-unused-jsx": {
        selector: ["variable", "parameter"],
        filter  : {
            regex: "(App|Page|Comp|Component|Context|Provider)$",
            match: true,
        },
        modifiers         : ["unused"],
        format            : ["PascalCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
    "underscore-private-property-jsx": {
        selector: ["property", "parameterProperty", "accessor"],
        filter  : {
            regex: "(App|Page|Comp|Component|Context|Provider)$",
            match: true,
        },
        modifiers         : ["private"],
        format            : ["PascalCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
    "underscore-protected-property-jsx": {
        selector: ["property", "parameterProperty", "accessor"],
        filter  : {
            regex: "(App|Page|Comp|Component|Context|Provider)$",
            match: true,
        },
        modifiers         : ["protected"],
        format            : ["PascalCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
    "external-object-literal-property-jsx": {
        selector: ["objectLiteralProperty"],
        filter  : {
            regex: "(App|Page|Comp|Component|Context|Provider)$",
            match: true,
        },
        format            : ["PascalCase"],
        leadingUnderscore : "forbid",
        trailingUnderscore: "forbid",
    },
    "external-underscore-private-object-literal-property-jsx": {
        selector: ["objectLiteralProperty"],
        filter  : {
            regex: "(App|Page|Comp|Component|Context|Provider)$",
            match: true,
        },
        modifiers         : ["private"],
        format            : ["PascalCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
    "external-underscore-protected-object-literal-property-jsx": {
        selector: ["objectLiteralProperty"],
        filter  : {
            regex: "(App|Page|Comp|Component|Context|Provider)$",
            match: true,
        },
        modifiers         : ["protected"],
        format            : ["PascalCase"],
        leadingUnderscore : "require",
        trailingUnderscore: "forbid",
    },
};

const NAMING_CONVENTION = Object.values(JSON.parse(JSON.stringify(NAMING_CONVENTION_RECORD)));
const NAMING_CONVENTION_TYPED = Object.values(JSON.parse(JSON.stringify(NAMING_CONVENTION_TYPED_RECORD)));
const NAMING_CONVENTION_REACT = Object.values(JSON.parse(JSON.stringify(NAMING_CONVENTION_REACT_RECORD)));

const ESLINT_RULES = {
    "no-unexpected-multiline": "error",
    "arrow-body-style"       : ["error", "always"],

    /*
     * There is 199 rules under eslint built-ins
     * setted: 0/199
     * TODO: complete and uncomment progressively after here
     */
    /*
     *"array-callback-return": ["error", ],
     *"constructor-super": ["error", ],
     *"for-direction": ["error", ],
     *"getter-return": ["error", ],
     *"no-async-promise-executor": ["error", ],
     *"no-await-in-loop": ["error", ],
     *"no-class-assign": ["error", ],
     *"no-compare-neg-zero": ["error", ],
     *"no-cond-assign": ["error", ],
     *"no-const-assign": ["error", ],
     *"no-constant-binary-expression": ["error", ],
     *"no-constant-condition": ["error", ],
     *"no-constructor-return": ["error", ],
     *"no-control-regex": ["error", ],
     *"no-debugger": ["error", ],
     *"no-dupe-args": ["error", ],
     *"no-dupe-class-members": ["error", ],
     *"no-dupe-else-if": ["error", ],
     *"no-dupe-keys": ["error", ],
     *"no-duplicate-case": ["error", ],
     *"no-duplicate-imports": ["error", ],
     *"no-empty-character-class": ["error", ],
     *"no-empty-pattern": ["error", ],
     *"no-ex-assign": ["error", ],
     *"no-fallthrough": ["error", ],
     *"no-func-assign": ["error", ],
     *"no-import-assign": ["error", ],
     *"no-inner-declarations": ["error", ],
     *"no-invalid-regexp": ["error", ],
     *"no-irregular-whitespace": ["error", ],
     *"no-loss-of-precision": ["error", ],
     *"no-misleading-character-class": ["error", ],
     *"no-new-native-nonconstructor": ["error", ],
     *"no-obj-calls": ["error", ],
     *"no-promise-executor-return": ["error", ],
     *"no-prototype-builtins": ["error", ],
     *"no-self-assign": ["error", ],
     *"no-self-compare": ["error", ],
     *"no-setter-return": ["error", ],
     *"no-sparse-arrays": ["error", ],
     *"no-template-curly-in-string": ["error", ],
     *"no-this-before-super": ["error", ],
     *"no-unassigned-vars": ["error", ],
     *"no-undef": ["error", ],
     *"no-unexpected-multiline": ["error", ],
     *"no-unmodified-loop-condition": ["error", ],
     *"no-unreachable": ["error", ],
     *"no-unreachable-loop": ["error", ],
     *"no-unsafe-finally": ["error", ],
     *"no-unsafe-negation": ["error", ],
     *"no-unsafe-optional-chaining": ["error", ],
     *"no-unused-private-class-members": ["error", ],
     *"no-unused-vars": ["error", ],
     *"no-use-before-define": ["error", ],
     *"no-useless-assignment": ["error", ],
     *"no-useless-backreference": ["error", ],
     *"require-atomic-updates": ["error", ],
     *"use-isnan": ["error", ],
     *"valid-typeof": ["error", ],
     *"accessor-pairs": ["error", ],
     *"arrow-body-style": ["error", ],
     *"block-scoped-var": ["error", ],
     *"camelcase": ["error", ],
     *"capitalized-comments": ["error", ],
     *"class-methods-use-this": ["error", ],
     *"complexity": ["error", ],
     *"consistent-return": ["error", ],
     *"consistent-this": ["error", ],
     *"curly": ["error", ],
     *"default-case": ["error", ],
     *"default-case-last": ["error", ],
     *"default-param-last": ["error", ],
     *"dot-notation": ["error", ],
     *"eqeqeq": ["error", ],
     *"func-name-matching": ["error", ],
     *"func-names": ["error", ],
     *"func-style": ["error", ],
     *"grouped-accessor-pairs": ["error", ],
     *"guard-for-in": ["error", ],
     *"id-denylist": ["error", ],
     *"id-length": ["error", ],
     *"id-match": ["error", ],
     *"init-declarations": ["error", ],
     *"logical-assignment-operators": ["error", ],
     *"max-classes-per-file": ["error", ],
     *"max-depth": ["error", ],
     *"max-lines": ["error", ],
     *"max-lines-per-function": ["error", ],
     *"max-nested-callbacks": ["error", ],
     *"max-params": ["error", ],
     *"max-statements": ["error", ],
     *"new-cap": ["error", ],
     *"no-alert": ["error", ],
     *"no-array-constructor": ["error", ],
     *"no-bitwise": ["error", ],
     *"no-caller": ["error", ],
     *"no-case-declarations": ["error", ],
     *"no-console": ["error", ],
     *"no-continue": ["error", ],
     *"no-delete-var": ["error", ],
     *"no-div-regex": ["error", ],
     *"no-else-return": ["error", ],
     *"no-empty": ["error", ],
     *"no-empty-function": ["error", ],
     *"no-empty-static-block": ["error", ],
     *"no-eq-null": ["error", ],
     *"no-eval": ["error", ],
     *"no-extend-native": ["error", ],
     *"no-extra-bind": ["error", ],
     *"no-extra-boolean-cast": ["error", ],
     *"no-extra-label": ["error", ],
     *"no-global-assign": ["error", ],
     *"no-implicit-coercion": ["error", ],
     *"no-implicit-globals": ["error", ],
     *"no-implied-eval": ["error", ],
     *"no-inline-comments": ["error", ],
     *"no-invalid-this": ["error", ],
     *"no-iterator": ["error", ],
     *"no-label-var": ["error", ],
     *"no-labels": ["error", ],
     *"no-lone-blocks": ["error", ],
     *"no-lonely-if": ["error", ],
     *"no-loop-func": ["error", ],
     *"no-magic-numbers": ["error", ],
     *"no-multi-assign": ["error", ],
     *"no-multi-str": ["error", ],
     *"no-negated-condition": ["error", ],
     *"no-nested-ternary": ["error", ],
     *"no-new": ["error", ],
     *"no-new-func": ["error", ],
     *"no-new-wrappers": ["error", ],
     *"no-nonoctal-decimal-escape": ["error", ],
     *"no-object-constructor": ["error", ],
     *"no-octal": ["error", ],
     *"no-octal-escape": ["error", ],
     *"no-param-reassign": ["error", ],
     *"no-plusplus": ["error", ],
     *"no-proto": ["error", ],
     *"no-redeclare": ["error", ],
     *"no-regex-spaces": ["error", ],
     *"no-restricted-exports": ["error", ],
     *"no-restricted-globals": ["error", ],
     *"no-restricted-imports": ["error", ],
     *"no-restricted-properties": ["error", ],
     *"no-restricted-syntax": ["error", ],
     *"no-return-assign": ["error", ],
     *"no-script-url": ["error", ],
     *"no-sequences": ["error", ],
     *"no-shadow": ["error", ],
     *"no-shadow-restricted-names": ["error", ],
     *"no-ternary": ["error", ],
     *"no-throw-literal": ["error", ],
     *"no-undef-init": ["error", ],
     *"no-undefined": ["error", ],
     *"no-underscore-dangle": ["error", ],
     *"no-unneeded-ternary": ["error", ],
     *"no-unused-expressions": ["error", ],
     *"no-unused-labels": ["error", ],
     *"no-useless-call": ["error", ],
     *"no-useless-catch": ["error", ],
     *"no-useless-computed-key": ["error", ],
     *"no-useless-concat": ["error", ],
     *"no-useless-constructor": ["error", ],
     *"no-useless-escape": ["error", ],
     *"no-useless-rename": ["error", ],
     *"no-useless-return": ["error", ],
     *"no-var": ["error", ],
     *"no-void": ["error", ],
     *"no-warning-comments": ["error", ],
     *"no-with": ["error", ],
     *"object-shorthand": ["error", ],
     *"one-var": ["error", ],
     *"operator-assignment": ["error", ],
     *"prefer-arrow-callback": ["error", ],
     *"prefer-const": ["error", ],
     *"prefer-destructuring": ["error", ],
     *"prefer-exponentiation-operator": ["error", ],
     *"prefer-named-capture-group": ["error", ],
     *"prefer-numeric-literals": ["error", ],
     *"prefer-object-has-own": ["error", ],
     *"prefer-object-spread": ["error", ],
     *"prefer-promise-reject-errors": ["error", ],
     *"prefer-regex-literals": ["error", ],
     *"prefer-rest-params": ["error", ],
     *"prefer-spread": ["error", ],
     *"prefer-template": ["error", ],
     *"preserve-caught-error": ["error", ],
     *"radix": ["error", ],
     *"require-await": ["error", ],
     *"require-unicode-regexp": ["error", ],
     *"require-yield": ["error", ],
     *"sort-imports": ["error", ],
     *"sort-keys": ["error", ],
     *"sort-vars": ["error", ],
     *"strict": ["error", ],
     *"symbol-description": ["error", ],
     *"vars-on-top": ["error", ],
     *"yoda": ["error", ],
     *"unicode-bom": ["error", ],
     */
};

const STYLISTIC_RULES = {
    // There is 95 rules under @stylistic
    "@stylistic/array-bracket-newline": ["error", { multiline: true, minItems: null }],
    "@stylistic/array-bracket-spacing": ["error", "never", { singleValue: false, objectsInArrays: false, arraysInArrays: false }],
    "@stylistic/array-element-newline": ["error", { consistent: true, multiline: true, minItems: null }],
    "@stylistic/arrow-parens"         : ["error", "always", { requireForBlockBody: true }],
    "@stylistic/arrow-spacing"        : ["error", { before: true, after: true }],
    "@stylistic/block-spacing"        : ["error", "always"],
    "@stylistic/brace-style"          : ["error", "stroustrup", { allowSingleLine: true }],
    "@stylistic/comma-dangle"         : [
        "error",
        {
            arrays          : "always-multiline",
            objects         : "always-multiline",
            imports         : "always-multiline",
            exports         : "always-multiline",
            functions       : "always-multiline",
            importAttributes: "always-multiline",
            dynamicImports  : "always-multiline",
            enums           : "always-multiline",
            generics        : "always-multiline",
            tuples          : "always-multiline",
        },
    ],
    "@stylistic/comma-spacing": ["error", { before: false, after: true }],
    "@stylistic/comma-style"  : [
        "error",
        "last",
        {
            exceptions: {
                ArrayExpression                : false,
                ArrayPattern                   : false,
                ArrowFunctionExpression        : false,
                CallExpression                 : false,
                FunctionDeclaration            : false,
                FunctionExpression             : false,
                ImportDeclaration              : false,
                ObjectExpression               : false,
                ObjectPattern                  : false,
                VariableDeclaration            : false,
                NewExpression                  : false,
                ExportAllDeclaration           : false,
                ExportNamedDeclaration         : false,
                ImportExpression               : false,
                SequenceExpression             : false,
                ClassDeclaration               : false,
                ClassExpression                : false,
                TSDeclareFunction              : false,
                TSFunctionType                 : false,
                TSConstructorType              : false,
                TSEmptyBodyFunctionExpression  : false,
                TSMethodSignature              : false,
                TSCallSignatureDeclaration     : false,
                TSConstructSignatureDeclaration: false,
                TSEnumBody                     : false,
                TSTypeLiteral                  : false,
                TSInterfaceBody                : false,
                TSIndexSignature               : false,
                TSInterfaceDeclaration         : false,
                TSTupleType                    : false,
                TSTypeParameterDeclaration     : false,
                TSTypeParameterInstantiation   : false,
            },
        },
    ],
    "@stylistic/computed-property-spacing": ["error", "never", { enforceForClassMembers: true }],
    "@stylistic/curly-newline"            : [
        "error",
        {
            IfStatementConsequent  : { multiline: true, consistent: true },
            IfStatementAlternative : { multiline: true, consistent: true },
            ForStatement           : { multiline: true, consistent: true },
            ForInStatement         : { multiline: true, consistent: true },
            ForOfStatement         : { multiline: true, consistent: true },
            WhileStatement         : { multiline: true, consistent: true },
            DoWhileStatement       : { multiline: true, consistent: true },
            SwitchStatement        : { multiline: true, consistent: true },
            SwitchCase             : { multiline: true, consistent: true },
            TryStatementBlock      : { multiline: true, consistent: true },
            TryStatementHandler    : { multiline: true, consistent: true },
            TryStatementFinalizer  : { multiline: true, consistent: true },
            BlockStatement         : { multiline: true, consistent: true },
            ArrowFunctionExpression: { multiline: true, consistent: true },
            FunctionDeclaration    : { multiline: true, consistent: true },
            FunctionExpression     : { multiline: true, consistent: true },
            Property               : { multiline: true, consistent: true },
            ClassBody              : { multiline: true, consistent: true },
            StaticBlock            : { multiline: true, consistent: true },
            WithStatement          : { multiline: true, consistent: true },
            TSModuleBlock          : { multiline: true, consistent: true },
        },
    ],
    "@stylistic/dot-location"                  : ["error", "property"],
    "@stylistic/eol-last"                      : ["error", "always"],
    "@stylistic/function-call-argument-newline": ["error", "consistent"],
    "@stylistic/function-call-spacing"         : ["error", "never"],
    "@stylistic/function-paren-newline"        : ["error", "multiline-arguments"],
    "@stylistic/generator-star-spacing"        : [
        "error",
        {
            before   : true,
            after    : false,
            named    : { before: true, after: false },
            anonymous: { before: true, after: false },
            method   : { before: true, after: false },
            shorthand: { before: true, after: false },
        },
    ],
    "@stylistic/implicit-arrow-linebreak": ["error", "beside"],
    "@stylistic/indent"                  : [
        "error",
        4,
        {
            SwitchCase        : 1,
            VariableDeclarator: {
                const: "first",
                let  : "first",
                var  : "first",
            },
            outerIIFEBody      : 1,
            MemberExpression   : 1,
            FunctionDeclaration: {
                parameters: "first",
                body      : 1,
                returnType: 1,
            },
            FunctionExpression: {
                parameters: "first",
                body      : 1,
                returnType: 1,
            },
            StaticBlock                                  : { body: 1 },
            CallExpression                               : { arguments: "first" },
            ArrayExpression                              : "first",
            ObjectExpression                             : "first",
            ImportDeclaration                            : "first",
            flatTernaryExpressions                       : false,
            offsetTernaryExpressions                     : false,
            offsetTernaryExpressionsOffsetCallExpressions: false,
            assignmentOperator                           : 1,
            ignoredNodes                                 : [],
            ignoreComments                               : false,
            tabLength                                    : 4,
        },
    ],
    "@stylistic/indent-binary-ops"           : ["error", 4],
    "@stylistic/jsx-child-element-spacing"   : "error",
    "@stylistic/jsx-closing-bracket-location": ["error", { nonEmpty: "tag-aligned", selfClosing: "tag-aligned" }],
    "@stylistic/jsx-closing-tag-location"    : ["error", "tag-aligned"],
    "@stylistic/jsx-curly-brace-presence"    : ["error", { props: "never", children: "never", propElementValues: "always" }],
    "@stylistic/jsx-curly-newline"           : ["error", { multiline: "consistent", singleline: "consistent" }],
    "@stylistic/jsx-curly-spacing"           : [
        "error",
        {
            when          : "never",
            allowMultiline: true,
            attributes    : {
                when          : "never",
                allowMultiline: true,
            },
            children: {
                when          : "never",
                allowMultiline: true,
            },
        },
    ],
    "@stylistic/jsx-equals-spacing"         : ["error", "never"],
    "@stylistic/jsx-first-prop-new-line"    : ["error", "multiline-multiprop"],
    "@stylistic/jsx-function-call-newline"  : ["error", "multiline"],
    "@stylistic/jsx-indent-props"           : ["error", { indentMode: 4, ignoreTernaryOperator: true }],
    "@stylistic/jsx-max-props-per-line"     : ["error", { maximum: 1, when: "multiline" }],
    "@stylistic/jsx-newline"                : ["error", { prevent: true, allowMultilines: true }],
    "@stylistic/jsx-one-expression-per-line": ["error", { allow: "single-line" }],
    "@stylistic/jsx-pascal-case"            : ["error", { allowAllCaps: true, allowLeadingUnderscore: false, allowNamespace: false, ignore: [] }],
    "@stylistic/jsx-quotes"                 : ["error", "prefer-double"],
    "@stylistic/jsx-self-closing-comp"      : "error",
    "@stylistic/jsx-sort-props"             : [
        "error",
        {
            callbacksLast       : false,
            shorthandFirst      : false,
            shorthandLast       : true,
            multiline           : "ignore",
            ignoreCase          : true,
            noSortAlphabetically: true,
            reservedFirst       : ["props", "key", "id", "ref", "children", "dangerouslySetInnerHTML"],
            locale              : "auto",
        },
    ],
    "@stylistic/jsx-tag-spacing": [
        "error",
        {
            closingSlash     : "never",
            beforeSelfClosing: "proportional-always",
            afterOpening     : "never",
            beforeClosing    : "never",
        },
    ],
    "@stylistic/jsx-wrap-multilines": [
        "error",
        {
            declaration  : "parens-new-line",
            assignment   : "parens-new-line",
            return       : "parens-new-line",
            arrow        : "parens-new-line",
            condition    : "parens-new-line",
            logical      : "parens-new-line",
            prop         : "parens-new-line",
            propertyValue: "parens-new-line",
        },
    ],
    "@stylistic/key-spacing": [
        "error",
        {
            align: {
                beforeColon: false,
                afterColon : true,
                on         : "colon",
                mode       : "strict",
            },
            singleLine: {
                beforeColon: false,
                afterColon : true,
                mode       : "strict",
            },
            multiLine: {
                beforeColon: false,
                afterColon : true,
                mode       : "strict",
            },
        },
    ],
    "@stylistic/keyword-spacing"      : ["error", { before: true, after: true, overrides: {} }],
    "@stylistic/line-comment-position": [
        "error",
        {
            position                  : "above",
            ignorePattern             : "@ts",
            applyDefaultIgnorePatterns: true,
        },
    ],
    "@stylistic/linebreak-style"     : ["error", "unix"],
    "@stylistic/lines-around-comment": [
        "error",
        {
            beforeBlockComment        : true,
            afterBlockComment         : false,
            beforeLineComment         : true,
            afterLineComment          : false,
            allowBlockStart           : true,
            allowBlockEnd             : false,
            allowClassStart           : true,
            allowClassEnd             : false,
            allowObjectStart          : true,
            allowObjectEnd            : false,
            allowArrayStart           : true,
            allowArrayEnd             : false,
            allowEnumStart            : true,
            allowEnumEnd              : false,
            allowInterfaceStart       : true,
            allowInterfaceEnd         : false,
            allowModuleStart          : true,
            allowModuleEnd            : false,
            allowTypeStart            : true,
            allowTypeEnd              : false,
            ignorePattern             : "@ts",
            applyDefaultIgnorePatterns: false,
            afterHashbangComment      : true,
        },
    ],
    "@stylistic/lines-between-class-members": [
        "error",
        {
            enforce: [{ blankLine: "always", prev: "*", next: "*" }],
        },
        {
            exceptAfterSingleLine: true,
            exceptAfterOverload  : true,
        },
    ],
    "@stylistic/max-len": [
        "error",
        150,
        4,
        {
            code                  : 150,
            tabWidth              : 4,
            comments              : 150,
            ignorePattern         : "",
            ignoreComments        : false,
            ignoreTrailingComments: true,
            ignoreUrls            : true,
            ignoreStrings         : false,
            ignoreTemplateLiterals: true,
            ignoreRegExpLiterals  : true,
        },
    ],
    "@stylistic/max-statements-per-line": ["error", { max: 5, ignoredNodes: [] }],
    "@stylistic/member-delimiter-style" : [
        "error",
        {
            multiline: {
                delimiter  : "semi",
                requireLast: true,
            },
            singleline: {
                delimiter  : "semi",
                requireLast: false,
            },
            multilineDetection: "brackets",
            overrides         : {},
        },
    ],
    "@stylistic/multiline-comment-style" : ["error", "starred-block"],
    "@stylistic/multiline-ternary"       : ["error", "always-multiline"],
    "@stylistic/new-parens"              : ["error", "always"],
    "@stylistic/newline-per-chained-call": ["error", { ignoreChainWithDepth: 2 }],
    "@stylistic/no-confusing-arrow"      : ["error", { allowParens: false, onlyOneSimpleParam: false }],
    "@stylistic/no-extra-parens"         : [
        "error",
        "all",
        {
            conditionalAssign                 : true,
            returnAssign                      : true,
            nestedBinaryExpressions           : false,
            ternaryOperandBinaryExpressions   : false,
            ignoreJSX                         : "multi-line",
            enforceForSequenceExpressions     : true,
            enforceForFunctionPrototypeMethods: true,
            allowParensAfterCommentPattern    : "",
            nestedConditionalExpressions      : false,
            ignoredNodes                      : [],
        },
    ],
    "@stylistic/no-extra-semi"      : "error",
    "@stylistic/no-floating-decimal": "error",
    "@stylistic/no-mixed-operators" : [
        "error",
        {
            groups: [
                ["+", "-", "*", "/", "%", "**"],
                ["||", "&&"],
            ],
            allowSamePrecedence: true,
        },
    ],
    "@stylistic/no-mixed-spaces-and-tabs": "error",
    "@stylistic/no-multi-spaces"         : [
        "error",
        {
            ignoreEOLComments: true,
            exceptions       : {
                Property           : true,
                TSPropertySignature: true,
                VariableDeclarator : true,
                ImportAttribute    : true,
            },
            includeTabs: true,
        },
    ],
    "@stylistic/no-multiple-empty-lines"         : ["error", { max: 2, maxEOF: 1, maxBOF: 0 }],
    "@stylistic/no-tabs"                         : ["error", { allowIndentationTabs: false }],
    "@stylistic/no-trailing-spaces"              : ["error", { skipBlankLines: true, ignoreComments: false }],
    "@stylistic/no-whitespace-before-property"   : "error",
    "@stylistic/nonblock-statement-body-position": ["error", "beside", { overrides: {} }],
    "@stylistic/object-curly-newline"            : ["error", { multiline: true, minProperties: 11, consistent: true }],
    "@stylistic/object-curly-spacing"            : ["error", "always", { arraysInObjects: true, objectsInObjects: true }],
    "@stylistic/object-property-newline"         : ["error", { allowAllPropertiesOnSameLine: true }],
    "@stylistic/one-var-declaration-per-line"    : ["error", "initializations"],
    "@stylistic/operator-linebreak"              : [
        "error",
        "before",
        {
            overrides: {
                "+"  : "before",
                "-"  : "before",
                "*"  : "before",
                "/"  : "before",
                "%"  : "before",
                "**" : "before",
                "&&" : "before",
                "||" : "before",
                "??" : "before",
                "&"  : "before",
                "|"  : "before",
                "^"  : "before",
                "~"  : "before",
                "<<" : "before",
                ">>" : "before",
                ">>>": "before",
                "==" : "before",
                "!=" : "before",
                "===": "before",
                "!==": "before",
                ">"  : "before",
                "<"  : "before",
                ">=" : "before",
                "<=" : "before",
            },
        },
    ],
    "@stylistic/padded-blocks": [
        "error",
        {
            blocks  : "never",
            classes : "never",
            switches: "never",
        },
        { allowSingleLineBlocks: true },
    ],
    "@stylistic/padding-line-between-statements": [
        "error",
        { blankLine: "any", prev: "*", next: "*" },
        {
            blankLine: "always",
            prev     : "*",
            next     : [
                "multiline-block-like",
                "class",
                "do",
                "multiline-export",
                "multiline-expression",
                "for",
                "function",
                "switch",
                "throw",
                "try",
                "with",
                "enum",
                "interface",
                "type",
                "return",
            ],
        },
        {
            blankLine: "always",
            prev     : [
                "multiline-block-like",
                "class",
                "do",
                "multiline-export",
                "multiline-expression",
                "for",
                "function",
                "switch",
                "throw",
                "try",
                "with",
                "enum",
                "interface",
                "type",
            ],
            next: "*",
        },
        { blankLine: "never", prev: "case", next: ["case", "default"] },
        { blankLine: "never", prev: "function-overload", next: ["function", "function-overload"] },
    ],
    "@stylistic/quote-props"        : ["error", "as-needed", { keywords: false, unnecessary: true, numbers: true }],
    "@stylistic/quotes"             : ["error", "double", { avoidEscape: false, allowTemplateLiterals: "never", ignoreStringLiterals: false }],
    "@stylistic/rest-spread-spacing": ["error", "never"],
    "@stylistic/semi"               : ["error", "always", { omitLastInOneLineBlock: false, omitLastInOneLineClassBody: false }],
    "@stylistic/semi-spacing"       : ["error", { before: false, after: true }],
    "@stylistic/semi-style"         : ["error", "last"],
    "@stylistic/space-before-blocks": [
        "error",
        {
            functions: "always",
            keywords : "always",
            classes  : "always",
            modules  : "always",
        },
    ],
    "@stylistic/space-before-function-paren": ["error", { anonymous: "never", named: "never", asyncArrow: "always", catch: "never" }],
    "@stylistic/space-in-parens"            : ["error", "never"],
    "@stylistic/space-infix-ops"            : ["error", { int32Hint: false, ignoreTypes: false }],
    "@stylistic/space-unary-ops"            : [
        "error",
        {
            words    : true,
            nonwords : false,
            overrides: {
                typeof: true,
                void  : true,
                delete: true,
                new   : true,
                yield : true,
                await : true,
                "+"   : false,
                "-"   : false,
                "++"  : false,
                "--"  : false,
                "!"   : false,
                "~"   : false,
            },
        },
    ],
    "@stylistic/spaced-comment": [
        "error",
        "always",
        {
            exceptions: [],
            markers   : [],
            line      : {
                exceptions: [],
                markers   : [],
            },
            block: {
                exceptions: [],
                markers   : [],
            },
        },
    ],
    "@stylistic/switch-colon-spacing"  : ["error", { before: false, after: true }],
    "@stylistic/template-curly-spacing": ["error", "never"],
    "@stylistic/template-tag-spacing"  : ["error", "always"],

    /**
     * Commented because in conflict with @stylistic/key-spacing
     * "@stylistic/type-annotation-spacing": [
     *     "error",
     *     {
     *         "before": false,
     *         "after": true,
     *         "overrides": {
     *             "colon": {
     *                 "before": false,
     *                 "after": true,
     *             },
     *             "arrow": {
     *                 "before": true,
     *                 "after": true,
     *             },
     *         },
     *     },
     * ],
     */
    "@stylistic/type-generic-spacing"    : "error",
    "@stylistic/type-named-tuple-spacing": "error",
    "@stylistic/wrap-iife"               : ["error", "inside", { functionPrototypeMethods: true }],
    "@stylistic/wrap-regex"              : "error",
    "@stylistic/yield-star-spacing"      : ["error", { before: false, after: true }],
};

const TS_NON_TYPED_RULES = {
    // TODO: Set it inside of other non-typed rules with alphabethic order
    "@typescript-eslint/no-unused-vars": [
        "error",
        {
            args                          : "all",
            argsIgnorePattern             : "^_",
            caughtErrors                  : "all",
            caughtErrorsIgnorePattern     : "^_",
            destructuredArrayIgnorePattern: "^_",
            varsIgnorePattern             : "^_",
            ignoreRestSiblings            : true,
        },
    ],

    /*
     * There is 65 non-typed rules under @typescript-eslint
     * setted: 0/65
     * TODO: complete and uncomment progressively after here
     */
    /*
     *"@typescript-eslint/adjacent-overload-signatures": ["error", ],
     *"@typescript-eslint/array-type": ["error", ],
     *"@typescript-eslint/ban-ts-comment": ["error", ],
     *"@typescript-eslint/ban-tslint-comment": ["error", ],
     *"@typescript-eslint/class-literal-property-style": ["error", ],
     *"@typescript-eslint/class-methods-use-this": ["error", ],
     *"@typescript-eslint/consistent-generic-constructors": ["error", ],
     *"@typescript-eslint/consistent-indexed-object-style": ["error", ],
     *"@typescript-eslint/consistent-type-assertions": ["error", ],
     *"@typescript-eslint/consistent-type-definitions": ["error", ],
     *"@typescript-eslint/consistent-type-imports": ["error", ],
     *"@typescript-eslint/default-param-last": ["error", ],
     *"@typescript-eslint/explicit-function-return-type": ["error", ],
     *"@typescript-eslint/explicit-member-accessibility": ["error", ],
     *"@typescript-eslint/explicit-module-boundary-types": ["error", ],
     *"@typescript-eslint/init-declarations": ["error", ],
     *"@typescript-eslint/max-params": ["error", ],
     *"@typescript-eslint/member-ordering": ["error", ],
     *"@typescript-eslint/method-signature-style": ["error", ],
     *"@typescript-eslint/no-array-constructor": ["error", ],
     *"@typescript-eslint/no-confusing-non-null-assertion": ["error", ],
     *"@typescript-eslint/no-dupe-class-members": ["error", ],
     *"@typescript-eslint/no-duplicate-enum-values": ["error", ],
     *"@typescript-eslint/no-dynamic-delete": ["error", ],
     *"@typescript-eslint/no-empty-function": ["error", ],
     *"@typescript-eslint/no-empty-object-type": ["error", ],
     *"@typescript-eslint/no-explicit-any": ["error", ],
     *"@typescript-eslint/no-extra-non-null-assertion": ["error", ],
     *"@typescript-eslint/no-extraneous-class": ["error", ],
     *"@typescript-eslint/no-import-type-side-effects": ["error", ],
     *"@typescript-eslint/no-inferrable-types": ["error", ],
     *"@typescript-eslint/no-invalid-this": ["error", ],
     *"@typescript-eslint/no-invalid-void-type": ["error", ],
     *"@typescript-eslint/no-loop-func": ["error", ],
     *"@typescript-eslint/no-magic-numbers": ["error", ],
     *"@typescript-eslint/no-misused-new": ["error", ],
     *"@typescript-eslint/no-namespace": ["error", ],
     *"@typescript-eslint/no-non-null-asserted-nullish-coalescing": ["error", ],
     *"@typescript-eslint/no-non-null-asserted-optional-chain": ["error", ],
     *"@typescript-eslint/no-non-null-assertion": ["error", ],
     *"@typescript-eslint/no-redeclare": ["error", ],
     *"@typescript-eslint/no-require-imports": ["error", ],
     *"@typescript-eslint/no-restricted-imports": ["error", ],
     *"@typescript-eslint/no-restricted-types": ["error", ],
     *"@typescript-eslint/no-shadow": ["error", ],
     *"@typescript-eslint/no-this-alias": ["error", ],
     *"@typescript-eslint/no-unnecessary-parameter-property-assignment": ["error", ],
     *"@typescript-eslint/no-unnecessary-type-constraint": ["error", ],
     *"@typescript-eslint/no-unsafe-declaration-merging": ["error", ],
     *"@typescript-eslint/no-unsafe-function-type": ["error", ],
     *"@typescript-eslint/no-unused-expressions": ["error", ],
     *"@typescript-eslint/no-unused-vars": ["error", ],
     *"@typescript-eslint/no-use-before-define": ["error", ],
     *"@typescript-eslint/no-useless-constructor": ["error", ],
     *"@typescript-eslint/no-useless-empty-export": ["error", ],
     *"@typescript-eslint/no-wrapper-object-types": ["error", ],
     *"@typescript-eslint/parameter-properties": ["error", ],
     *"@typescript-eslint/prefer-as-const": ["error", ],
     *"@typescript-eslint/prefer-enum-initializers": ["error", ],
     *"@typescript-eslint/prefer-for-of": ["error", ],
     *"@typescript-eslint/prefer-function-type": ["error", ],
     *"@typescript-eslint/prefer-literal-enum-member": ["error", ],
     *"@typescript-eslint/prefer-namespace-keyword": ["error", ],
     *"@typescript-eslint/triple-slash-reference": ["error", ],
     *"@typescript-eslint/unified-signatures": ["error", ],
     */
};

const TS_TYPED_RULES = {
    /*
     * There is 58 typed rules under @typescript-eslint
     * setted: 0/58
     * TODO: complete and uncomment progressively after here
     *       move those that can also works without typed to getTsTypedOrNonTypedRules()
     */
    /*
     *"@typescript-eslint/await-thenable": ["error", ],
     *"@typescript-eslint/consistent-return": ["error", ],
     *"@typescript-eslint/consistent-type-exports": ["error", ],
     *"@typescript-eslint/dot-notation": ["error", ],
     *"@typescript-eslint/no-array-delete": ["error", ],
     *"@typescript-eslint/no-base-to-string": ["error", ],
     *"@typescript-eslint/no-confusing-void-expression": ["error", ],
     *"@typescript-eslint/no-deprecated": ["error", ],
     *"@typescript-eslint/no-duplicate-type-constituents": ["error", ],
     *"@typescript-eslint/no-floating-promises": ["error", ],
     *"@typescript-eslint/no-for-in-array": ["error", ],
     *"@typescript-eslint/no-implied-eval": ["error", ],
     *"@typescript-eslint/no-meaningless-void-operator": ["error", ],
     *"@typescript-eslint/no-misused-promises": ["error", ],
     *"@typescript-eslint/no-misused-spread": ["error", ],
     *"@typescript-eslint/no-mixed-enums": ["error", ],
     *"@typescript-eslint/no-redundant-type-constituents": ["error", ],
     *"@typescript-eslint/no-unnecessary-boolean-literal-compare": ["error", ],
     *"@typescript-eslint/no-unnecessary-condition": ["error", ],
     *"@typescript-eslint/no-unnecessary-qualifier": ["error", ],
     *"@typescript-eslint/no-unnecessary-template-expression": ["error", ],
     *"@typescript-eslint/no-unnecessary-type-arguments": ["error", ],
     *"@typescript-eslint/no-unnecessary-type-assertion": ["error", ],
     *"@typescript-eslint/no-unnecessary-type-conversion": ["error", ],
     *"@typescript-eslint/no-unnecessary-type-parameters": ["error", ],
     *"@typescript-eslint/no-unsafe-argument": ["error", ],
     *"@typescript-eslint/no-unsafe-assignment": ["error", ],
     *"@typescript-eslint/no-unsafe-call": ["error", ],
     *"@typescript-eslint/no-unsafe-enum-comparison": ["error", ],
     *"@typescript-eslint/no-unsafe-member-access": ["error", ],
     *"@typescript-eslint/no-unsafe-return": ["error", ],
     *"@typescript-eslint/no-unsafe-type-assertion": ["error", ],
     *"@typescript-eslint/no-unsafe-unary-minus": ["error", ],
     *"@typescript-eslint/non-nullable-type-assertion-style": ["error", ],
     *"@typescript-eslint/only-throw-error": ["error", ],
     *"@typescript-eslint/prefer-destructuring": ["error", ],
     *"@typescript-eslint/prefer-find": ["error", ],
     *"@typescript-eslint/prefer-includes": ["error", ],
     *"@typescript-eslint/prefer-nullish-coalescing": ["error", ],
     *"@typescript-eslint/prefer-optional-chain": ["error", ],
     *"@typescript-eslint/prefer-promise-reject-errors": ["error", ],
     *"@typescript-eslint/prefer-readonly": ["error", ],
     *"@typescript-eslint/prefer-readonly-parameter-types": ["error", ],
     *"@typescript-eslint/prefer-reduce-type-parameter": ["error", ],
     *"@typescript-eslint/prefer-regexp-exec": ["error", ],
     *"@typescript-eslint/prefer-return-this-type": ["error", ],
     *"@typescript-eslint/prefer-string-starts-ends-with": ["error", ],
     *"@typescript-eslint/promise-function-async": ["error", ],
     *"@typescript-eslint/related-getter-setter-pairs": ["error", ],
     *"@typescript-eslint/require-array-sort-compare": ["error", ],
     *"@typescript-eslint/require-await": ["error", ],
     *"@typescript-eslint/restrict-plus-operands": ["error", ],
     *"@typescript-eslint/restrict-template-expressions": ["error", ],
     *"@typescript-eslint/return-await": ["error", ],
     *"@typescript-eslint/strict-boolean-expressions": ["error", ],
     *"@typescript-eslint/switch-exhaustiveness-check": ["error", ],
     *"@typescript-eslint/unbound-method": ["error", ],
     *"@typescript-eslint/use-unknown-in-catch-callback-variable": ["error", ],
     */
};

function getTsTypedOrNonTypedRules(is_typed = false) {
    const rules = {
        /*
         * There is 1 typed-or-non-typed rules under @typescript-eslint
         * setted: 1/1
         * TODO: move rules from before that are in typed rules but that can also
         * works non-typed with their value set to non-typed here and change them later
         */
        "@typescript-eslint/naming-convention": ["error", ...NAMING_CONVENTION],
    };

    if (is_typed) {
        rules["@typescript-eslint/naming-convention"] = ["error", ...NAMING_CONVENTION, ...NAMING_CONVENTION_TYPED];
    }

    return rules;
}

const REACT_RULES = {
    "react/function-component-definition": [
        "error",
        {
            namedComponents  : "arrow-function",
            unnamedComponents: "arrow-function",
        },
    ],
    "react/react-in-jsx-scope": "off",

    /*
     * There is 101 typed rules under react
     * setted: 0/101
     * TODO: complete and uncomment progressively after here
     *       move those that can also works without typed to getTsTypedOrNonTypedRules()
     */
    /*
     *"react/boolean-prop-naming": ["error", ],
     *"react/button-has-type": ["error", ],
     *"react/checked-requires-onchange-or-readonly": ["error", ],
     *"react/default-props-match-prop-types": ["error", ],
     *"react/destructuring-assignment": ["error", ],
     *"react/display-name": ["error", ],
     *"react/forbid-component-props": ["error", ],
     *"react/forbid-dom-props": ["error", ],
     *"react/forbid-elements": ["error", ],
     *"react/forbid-foreign-prop-types": ["error", ],
     *"react/forbid-prop-types": ["error", ],
     *"react/forward-ref-uses-ref": ["error", ],
     *"react/function-component-definition": ["error", ],
     *"react/hook-use-state": ["error", ],
     *"react/iframe-missing-sandbox": ["error", ],
     *"react/jsx-boolean-value": ["error", ],
     *"react/jsx-child-element-spacing": ["error", ],
     *"react/jsx-closing-bracket-location": ["error", ],
     *"react/jsx-closing-tag-location": ["error", ],
     *"react/jsx-curly-brace-presence": ["error", ],
     *"react/jsx-curly-newline": ["error", ],
     *"react/jsx-curly-spacing": ["error", ],
     *"react/jsx-equals-spacing": ["error", ],
     *"react/jsx-filename-extension": ["error", ],
     *"react/jsx-first-prop-new-line": ["error", ],
     *"react/jsx-fragments": ["error", ],
     *"react/jsx-handler-names": ["error", ],
     *"react/jsx-indent": ["error", ],
     *"react/jsx-indent-props": ["error", ],
     *"react/jsx-key": ["error", ],
     *"react/jsx-max-depth": ["error", ],
     *"react/jsx-max-props-per-line": ["error", ],
     *"react/jsx-newline": ["error", ],
     *"react/jsx-no-bind": ["error", ],
     *"react/jsx-no-comment-textnodes": ["error", ],
     *"react/jsx-no-constructed-context-values": ["error", ],
     *"react/jsx-no-duplicate-props": ["error", ],
     *"react/jsx-no-leaked-render": ["error", ],
     *"react/jsx-no-literals": ["error", ],
     *"react/jsx-no-script-url": ["error", ],
     *"react/jsx-no-target-blank": ["error", ],
     *"react/jsx-no-undef": ["error", ],
     *"react/jsx-no-useless-fragment": ["error", ],
     *"react/jsx-one-expression-per-line": ["error", ],
     *"react/jsx-pascal-case": ["error", ],
     *"react/jsx-props-no-multi-spaces": ["error", ],
     *"react/jsx-props-no-spread-multi": ["error", ],
     *"react/jsx-props-no-spreading": ["error", ],
     *"react/jsx-sort-props": ["error", ],
     *"react/jsx-tag-spacing": ["error", ],
     *"react/jsx-uses-react": ["error", ],
     *"react/jsx-uses-vars": ["error", ],
     *"react/jsx-wrap-multilines": ["error", ],
     *"react/no-access-state-in-setstate": ["error", ],
     *"react/no-adjacent-inline-elements": ["error", ],
     *"react/no-array-index-key": ["error", ],
     *"react/no-arrow-function-lifecycle": ["error", ],
     *"react/no-children-prop": ["error", ],
     *"react/no-danger": ["error", ],
     *"react/no-danger-with-children": ["error", ],
     *"react/no-deprecated": ["error", ],
     *"react/no-did-mount-set-state": ["error", ],
     *"react/no-did-update-set-state": ["error", ],
     *"react/no-direct-mutation-state": ["error", ],
     *"react/no-find-dom-node": ["error", ],
     *"react/no-invalid-html-attribute": ["error", ],
     *"react/no-is-mounted": ["error", ],
     *"react/no-multi-comp": ["error", ],
     *"react/no-namespace": ["error", ],
     *"react/no-object-type-as-default-prop": ["error", ],
     *"react/no-redundant-should-component-update": ["error", ],
     *"react/no-render-return-value": ["error", ],
     *"react/no-set-state": ["error", ],
     *"react/no-string-refs": ["error", ],
     *"react/no-this-in-sfc": ["error", ],
     *"react/no-typos": ["error", ],
     *"react/no-unescaped-entities": ["error", ],
     *"react/no-unknown-property": ["error", ],
     *"react/no-unsafe": ["error", ],
     *"react/no-unstable-nested-components": ["error", ],
     *"react/no-unused-class-component-methods": ["error", ],
     *"react/no-unused-prop-types": ["error", ],
     *"react/no-unused-state": ["error", ],
     *"react/no-will-update-set-state": ["error", ],
     *"react/prefer-es6-class": ["error", ],
     *"react/prefer-exact-props": ["error", ],
     *"react/prefer-read-only-props": ["error", ],
     *"react/prefer-stateless-function": ["error", ],
     *"react/prop-types": ["error", ],
     *"react/react-in-jsx-scope": ["error", ],
     *"react/require-default-props": ["error", ],
     *"react/require-optimization": ["error", ],
     *"react/require-render-return": ["error", ],
     *"react/self-closing-comp": ["error", ],
     *"react/sort-comp": ["error", ],
     *"react/sort-default-props": ["error", ],
     *"react/sort-prop-types": ["error", ],
     *"react/state-in-constructor": ["error", ],
     *"react/static-property-placement": ["error", ],
     *"react/style-prop-object": ["error", ],
     *"react/void-dom-elements-no-children": ["error", ],
     */
};

export default defineConfig([
    // Basic config
    {
        files: ["**/*.[jt]s?(x)"],

        // Remove extends when every rules are correctly configured
        extends: [
            eslint.configs.recommended,
            tseslint.configs.strict,
            tseslint.configs.stylistic,
        ],
        plugins: {
            "@stylistic"        : stylisticPlugin,
            "@typescript-eslint": tsPlugin,
        },

        /**
         * TODO: add more language and parser options
         * (but set those that require type in TS config,
         * but can let here those that are for type but do not enfore it)
         */
        languageOptions: {
            parser       : tsParser,
            parserOptions: {
                projectService : true,
                tsconfigRootDir: import.meta.dirname,
            },
        },

        /**
         * TODO: add more settings according to plugins used and basic from eslint
         * (but set those that require type in TS config,
         * but can let here those that are for type but do not enfore it)
         */
        settings: {},
        rules   : {
            ...ESLINT_RULES,
            ...STYLISTIC_RULES,
            ...TS_NON_TYPED_RULES,
        },
    },

    // TS config (also for JS if IS_JS_TYPED)
    {
        files: ["**/*.ts?(x)", ...IS_JS_TYPED ? ["**/*.js?(x)"] : []],

        // Remove extends when every rules are correctly configured
        extends: [
            tseslint.configs.strictTypeChecked,
            tseslint.configs.stylisticTypeChecked,
        ],
        rules: {
            ...TS_TYPED_RULES,
            ...getTsTypedOrNonTypedRules(true),
        },
    },

    // JS config (if not IS_JS_TYPED)
    !IS_JS_TYPED
        ? {
            files: ["**/*.js?(x)"],
            rules: {
                ...getTsTypedOrNonTypedRules(false),
            },
        }
        : {},

    // React basic config
    {
        files  : ["**/*.[jt]sx"],
        plugins: {
            react: reactPlugin,
        },

        // TODO: add more language and parser options that are not in basic config
        languageOptions: {},

        // TODO: add more settings that are not in basic config
        settings: {
            react: {
                version: "detect",
            },
        },
        rules: {
            ...REACT_RULES,
        },
    },

    // TS config (also for JS if IS_JS_TYPED)
    {
        files: ["**/*.tsx", ...IS_JS_TYPED ? ["**/*.jsx"] : []],
        rules: {
            "@typescript-eslint/naming-convention": [
                "error",
                ...NAMING_CONVENTION,
                ...NAMING_CONVENTION_TYPED,
                ...NAMING_CONVENTION_REACT,
            ],
        },
    },

    // JS config (if not IS_JS_TYPED)
    !IS_JS_TYPED
        ? {
            files: ["**/*.jsx"],
            rules: {
                "@typescript-eslint/naming-convention": [
                    "error",
                    ...NAMING_CONVENTION,
                    ...NAMING_CONVENTION_REACT,
                ],
            },
        }
        : {},
]);
